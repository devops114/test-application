
# azure-pipelines.yml
name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - main

variables:
  API_URL: 'https://2r1jycdqag.execute-api.us-east-1.amazonaws.com/Prod/detect-errors/'

pool: default

steps:
- script: |
    echo "Using system Python: $(python3 --version)"
    echo "Python path: $(which python3)"
  displayName: 'Check Python Version'

- script: |
    python3 calculator.py 2>&1 | tee build.log
  displayName: 'Run Calculator App'

- bash: |
    echo "Preparing logs for AI analysis..."
    # Format the build log into a valid JSON array of strings
    LOG_JSON="["
    while IFS= read -r line; do
        # Escape any double quotes in the log line for JSON
        escaped_line=$(echo "$line" | sed 's/"/\\"/g')
        LOG_JSON="$LOG_JSON\"$escaped_line\","
    done < build.log
    LOG_JSON="${LOG_JSON%,}]"  # Remove the trailing comma and close the array

    # Create the final payload
    JSON_PAYLOAD="{\"log_lines\": $LOG_JSON}"
    echo "Payload prepared."

    # Call the LSTM model endpoint hosted on AWS
    echo "Sending logs to LSTM Model for analysis..."
    RESPONSE=$(curl -s -X POST "$(API_URL)" -H "Content-Type: application/json" -d "$JSON_PAYLOAD")
    echo "API Response: $RESPONSE"

    # Parse the JSON response to check for errors
    ERRORS_FOUND=$(echo "$RESPONSE" | python3 -c "import json, sys; data=json.load(sys.stdin); print(data.get('errors_found', 'false'))")
    
    # Fail the Azure build if the AI detects an error
    if [ "$ERRORS_FOUND" = "true" ]; then
        echo "##vso[task.logissue type=error]AI Anomaly Detection: Errors found! Build failed."
        exit 1
    else
        echo "AI Anomaly Detection: No errors found. Build succeeded."
    fi
  displayName: 'LSTM AI Analysis & Decision'
